import thunk from "redux-thunk";
import moxios from "moxios";
import fetchPoke from "./../../actions/pokeAction";
import configureMockStore from "redux-mock-store";
import pokeType from "../../actions/pokeType";
const middleware = [thunk];
const mockStore = configureMockStore(middleware);
const INITIAL_STATE = {
  pdata: [],
  error: null,
};
const postsList = {
  name: "charmeleon",
  abilities: ["blaze", "torrent"],
};
describe("Test Post Actions", () => {
  let store;
  beforeEach(() => {
    moxios.install();
    store = mockStore(INITIAL_STATE);
  });
  afterEach(() => {
    moxios.uninstall();
  });

  it("Loads all posts correctly", (done) => {
    moxios.wait(function () {
      let request = moxios.requests.mostRecent();
      request.respondWith({
        status: 200,
        response: [
          {
            pokemon: "chameleon",
            height: 23,
          },
        ],
      });
    });

    const expectedActions = [
      {
        type: pokeType.FETCH_POKEMON_SUCCESS,
        payload: postsList,
      },
    ];
    return store.dispatch(fetchPoke("charmeleon")).then(() => {
      const actualAction = store.getActions();
      console.log("actual----", actualAction);
      expect(actualAction).toEqual(expectedActions);
      done();
    });
  });

  //   it("Returns error action when no posts found", (done) => {
  //     moxios.wait(function () {
  //       let request = moxios.requests.mostRecent();
  //       request.respondWith({
  //         status: 200,
  //         response: null,
  //       });
  //     });

  //     const expectedActions = [
  //       {
  //         type: pokeType.FETCH_ERROR,
  //       },
  //     ];
  //     return store.dispatch(fetchPoke()).then(() => {
  //       const actualAction = store.getActions();
  //       expect(actualAction).toEqual(null);
  //       done();
  //     });
  //   });
});
